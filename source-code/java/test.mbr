include "defs.mbr" ;


type FuzzyCsp = PVSType<0.0..1.0> = 
  instantiates with "fuzzy_type.mzn" {
    times -> min;
    is_worse -> is_worse_fuzzy;
    top -> 1.0;
    % bot -> 0.0;
  }; 
  
% defines weighted CSP as type
type WeightedCsp = PVSType<bool, int> = 
  params {
    int: k; 
    array[1..nScs] of 1..k: weights;
  } in  
  instantiates with "weighteds_type.mzn" {
    times -> sum;
    is_worse -> is_worse_weighted;
    top -> 0;
    % bot -> k+1;
  };

type CostFunctionNetwork = PVSType<0..k> = 
  params {
    int: k; 
  } in 
  instantiates with "weighted_type.mzn" {
    times -> weighted_sum;
    is_worse -> is_worse_weighted;
    top -> 0;
    % bot -> k+1;
  };
    
type FuzzyCsp = PVSType< 0.0 .. 1.0 >  = 
  instantiates with "fuzzy_type.mzn" {
    times -> min;
    is_worse -> is_worse_fuzzy;
    top -> 1.0;
    % bot -> 0.0;
  };  

type ConstraintRelationships = PVSType<bool, set of 1..nScs> = 
  params { 
    array[int, 1..2] of 1..nScs: crEdges;
    bool: useSPD;
  } in 
  instantiates with "cr_type.mzn" {
    times -> link_booleans;
    is_worse -> is_worse_cr;
    top -> {};
    % bot -> 1..nScs;
  };
    
morph ConstraintRelationships -> WeightedCsp: ToWeighted = weight_cr;
   

PVS: fuzzyInstance = new FuzzyCsp("fuzzy1", 3); 
PVS: weightedInstance = new WeightedCsp("w1", 3, 8, [2,1,2]);

PVS: cr = new ConstraintRelationships("cr1", 2, [| 1, 2 |]);

PVS: combi = fuzzyInstance * weightedInstance lex fuzzyInstance;

solve combi;
/*
This should look something like that:

predicate is_worse_cr(var set of 1..nScs: violated1, var set of 1..nScs: violated2, crEdges, useSPD) =
if useSPD then
  is_worse_spd(violated1, violated2, crEdges)
else
  is_worse_tpd(violated1, violated2, crEdges
endif;
*/