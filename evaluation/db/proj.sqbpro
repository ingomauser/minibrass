<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/home/alexander/Documents/Projects/git-new/Minizinc/minizinc-soft-constraints/evaluation/db/results.db"/><window><current_tab id="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1006"/><expanded_item id="0" parent="-1"/><expanded_item id="1" parent="-1"/><expanded_item id="2" parent="-1"/><expanded_item id="3" parent="-1"/></tab_structure><tab_browse><current_table name="JobResult"/><default_encoding codec=""/><browsetable_info data="AAAAAgAAABIASgBvAGIAUgBlAHMAdQBsAHQAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAADABDAG8AbgBmAGkAZwAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8="/></tab_browse><tab_sql><sql name="SQL 1">SELECT * FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
where Timeout &gt; 10000 and 
SearchType = 3 
and instance = 'concert.dzn'
-- group by instance, SPD, Objective</sql><sql name="query.sql">SELECT problem, instance, SolverName, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
-- group by instance, SPD, Objective
where searchtype = 3 and problem =&quot;soft-queens&quot; and instance = &quot;soft-queens-30.dzn&quot;
and SPD = 1 and MIF = 0 and timeout &gt; 10000
order by problem, instance, elapsedSecs, solverId </sql><sql name="query-mif-comp.sql"> Drop View MifData; Drop View NoMifData;

Create View If not Exists MiFData as 
SELECT problem, instance, SolverName, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 1 and timeout &gt; 10000 and PropRed = 0 
order by problem, instance, elapsedSecs, solverId ;

Create View If not Exists NoMiFData as 
SELECT problem, instance, SolverName, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 0 and timeout &gt; 10000 and PropRed = 0 
order by problem, instance, elapsedSecs, solverId ;

Select AVG(diff), AVG(Impr), COUNT(*), AVG(MdOpt), AVG(NmdOpt) From
( 
Select md.elapsedSecs - nmd.elapsedSecs as diff, md.elapsedSecs - nmd.elapsedSecs &lt; 0 as Impr, md.Optimally as MdOpt, nmd.Optimally as NmdOpt  
From MifData as md, NoMifData as nmd
Where md.problem = nmd.problem and md.instance = nmd.instance and md.SolverName = nmd.SolverName
);
</sql><sql name="SQL 5">SELECT * -- problem, instance, SolverName, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally FROM 
From 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
-- group by instance, SPD, Objective
where SPD = 1 and MIF = 0 and PropRed = 0 and timeout &gt; 10000
order by problem, instance, elapsedSecs, solverId </sql><sql name="query-mif-comparison.sql">Select AVG(diff), AVG(Impr), COUNT(*), AVG(MdOpt), AVG(NmdOpt) From
( 
Select md.elapsedSecs - nmd.elapsedSecs as diff, md.elapsedSecs - nmd.elapsedSecs &lt; 0 as Impr, md.Optimally as MdOpt, nmd.Optimally as NmdOpt  
From MifData as md, NoMifData as nmd
Where md.problem = nmd.problem and md.instance = nmd.instance and md.SolverName = nmd.SolverName
);
</sql><sql name="query-native-vs-weightedMinisearch-overhead.sql">Drop View PvsData; Drop View NativeData; Drop View PvsNativeSummary;

Create View If not Exists PvsData as 
SELECT problem, instance, SolverName, SolverId, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 0 and SearchType = 1 and Solved = 1 AND cf.PropRed = 1
order by problem, instance, elapsedSecs, solverId ;

Create View If not Exists NativeData as 
SELECT problem, instance, SolverName, SolverId, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 0 and SearchType = 3 AND cf.PropRed = 0
order by problem, instance, elapsedSecs, solverId ;

Create View If not Exists PvsNativeSummary as 
Select pd.Problem, pd.Instance, pd.SolverName, pd.elapsedSecs as &quot;Smyth-Elapsed&quot;, pd.Objective as &quot;Smyth-Obj&quot;, nd.elapsedSecs as &quot;Weights-Elapsed&quot;, nd.Objective as &quot;Weights-Objective&quot; ,
       pd.elapsedSecs - nd.elapsedSecs as &quot;AbsOverhead&quot;, pd.elapsedSecs / nd.elapsedSecs as &quot;RelOverhead&quot;

from PvsData pd, NativeData nd
where pd.Problem = nd.Problem and 
      pd.Instance = nd.Instance and 
	  pd.SolverId = nd.SolverId
order by pd.problem, pd.instance, pd.solverName;

Select Problem,
 AVG(AbsOverhead), AVG(RelOverhead) 
FROM PvsNativeSummary WHERE Problem != &quot;soft-queens&quot;</sql><sql name="query-native-vs-strictbab-overhead.sql">Drop View PvsData; Drop View NativeData; Drop View PvsNativeSummary;

Create View If not Exists PvsData as 
SELECT problem, instance, SolverName, SolverId, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 0 and SearchType = 1 and Solved = 1
order by problem, instance, elapsedSecs, solverId ;

Create View If not Exists NativeData as 
SELECT problem, instance, SolverName, SolverId, round(elapsedSecs,2) as elapsedSecs, Objective, Optimally, cf.ID as ConfigId FROM 
JobResult jr INNER JOIN Config cf ON jr.ConfigId = cf.ID 
INNER JOIN Solver sv ON jr.SolverId = sv.ID 
where SPD = 1 and MIF = 0 and SearchType = 3 
order by problem, instance, elapsedSecs, solverId ;

Create View If not Exists PvsNativeSummary as 
Select pd.Problem, pd.Instance, pd.SolverName, pd.elapsedSecs as &quot;Smyth-Elapsed&quot;, pd.Objective as &quot;Smyth-Obj&quot;, nd.elapsedSecs as &quot;Weights-Elapsed&quot;, nd.Objective as &quot;Weights-Objective&quot; ,
       pd.elapsedSecs - nd.elapsedSecs as &quot;AbsOverhead&quot;, pd.elapsedSecs / nd.elapsedSecs as &quot;RelOverhead&quot;

from PvsData pd, NativeData nd
where pd.Problem = nd.Problem and 
      pd.Instance = nd.Instance and 
	  pd.SolverId = nd.SolverId
order by pd.problem, pd.instance, pd.solverName;

Select Problem,
 AVG(AbsOverhead), AVG(RelOverhead) 
FROM PvsNativeSummary WHERE Problem != &quot;soft-queens&quot;</sql><current_tab id="6"/></tab_sql></sqlb_project>
